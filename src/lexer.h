#pragma once

#include "value.h"

typedef enum {
  // Single-character tokens (0 - 15)
  TOKEN_LEFT_PAREN, TOKEN_RIGHT_PAREN,
  TOKEN_LEFT_BRACKET, TOKEN_RIGHT_BRACKET,
  TOKEN_LEFT_BRACE, TOKEN_RIGHT_BRACE,
  TOKEN_SEMICOLON, TOKEN_COMMA, TOKEN_PLUS,
  TOKEN_SLASH, TOKEN_PERCENT, TOKEN_QUESTION,
  TOKEN_PIPE, TOKEN_CARET, TOKEN_AMPERSAND,
  TOKEN_TILDE,
  // One or two (or three) character tokens (16 - 34)
  TOKEN_DOT, TOKEN_DOT_DOT, TOKEN_DOT_DOT_LT,
  TOKEN_COLON, TOKEN_COLON_COLON,
  TOKEN_STAR, TOKEN_STAR_STAR,
  TOKEN_MINUS, TOKEN_RIGHT_ARROW,
  TOKEN_BANG, TOKEN_BANG_EQ,
  TOKEN_EQ, TOKEN_EQ_EQ,
  TOKEN_GT, TOKEN_GT_EQ, TOKEN_SHIFT_RIGHT,
  TOKEN_LT, TOKEN_LT_EQ, TOKEN_SHIFT_LEFT,
  // Literals (35 - 38)
  TOKEN_IDENTIFIER, TOKEN_STRING, TOKEN_INTERPOLATION, TOKEN_NUMBER,
  // Keywords (39 - 70)
  TOKEN_AND, TOKEN_AS, TOKEN_ATTRIBUTE, TOKEN_BREAK, TOKEN_CLASS,
  TOKEN_CONTINUE, TOKEN_DO, TOKEN_EACH, TOKEN_ELIF, TOKEN_ELSE,
  TOKEN_FALSE, TOKEN_FOR, TOKEN_FUN, TOKEN_IF, TOKEN_IN, TOKEN_IS,
  TOKEN_NONE, TOKEN_NOT, TOKEN_OR, TOKEN_PASS, TOKEN_PRINT, 
  TOKEN_PRINT_ERROR, TOKEN_RETURN, TOKEN_STATIC, TOKEN_SUPER,
  TOKEN_THIS, TOKEN_TRUE, TOKEN_USE, TOKEN_VAL, TOKEN_VAR, TOKEN_WHEN,
  TOKEN_WHILE,
  // Whitespace (71 - 73)
  TOKEN_INDENT, TOKEN_DEDENT, TOKEN_LINE,
  // (74 - 76)
  TOKEN_EOF, TOKEN_ERROR, TOKEN_NULL
} TokenType;

typedef struct {
  TokenType type;
  const char* start;
  int length;
  int line;
  int startCol;
  Value value;
} Token;

void initLexer(const char* source);
void freeLexer();
Token nextToken();
