class Bool
  init()
    error "Bool class is not directly callable"
class BoundMethod
  init()
    error "BoundMethod class is not directly callable"
class Function
  init()
    error "Function class is not directly callable"
class `None`
  init()
    error "None class is not directly callable"
class Number
  init()
    error "Number class is not directly callable"
class Random
  randByte() = this.randBytes(1)[0]

class Sequence
  init()
    error "Sequence class is not directly callable"

  attribute count
    var result = 0
    each i in this do result = result + 1
    return result

  attribute isEmpty = not this.iterate(None)

  all(function)
    var result = True
    each element in this
      result = function(element)
      if not result do return False
    return True

  any(function)
    var result = False
    each element in this
      result = function(element)
      if result do return True
    return False

  contains(item)
    each element in this
      if element == item do return True
    return False

  count(function)
    var result = 0
    each element in this
      if function(element) do result = result + 1
    return result

  forEach(function)
    each element in this
      function(element)

  map(transformation) = MapSequence(this, transformation)

  skip(count)
    if (count is not Number) or (not count.isInteger) or count < 0
      error "Count must be a positive integer"

    return SkipSequence(this, count)

  take(count)
    if (count is not Number) or (not count.isInteger) or count < 0
      error "Count must be a positive integer"

    return TakeSequence(this, count)

  filter(predicate) = FilterSequence(this, predicate)

  reduce(acc, function)
    each element in this
      acc = function(acc, element)
    return acc

  reduce(function)
    var iter = this.iterate(None)
    if not iter do return

    var result = this.iteratorValue(iter)
    while iter = this.iterate(iter)
      result = function(result, this.iteratorValue(iter))

    return result

  joinToString() = this.joinToString(", ")

  joinToString(sep)
    var result = ""

    each item[index] in this
      if index != 0 do result = result + sep
      result = result + item.toString()

    return result

  toList()
    var result = List()
    each element in this
      result.add(element)
    return result

class MapSequence < Sequence
  init(+sequence, +function)
    pass

  iterate(iterator) = this.sequence.iterate(iterator)

  iteratorValue(iterator)
    return this.function(this.sequence.iteratorValue(iterator))

class SkipSequence < Sequence
  init(+sequence, +count)
    pass

  iterate(iterator)
    if iterator
      return this.sequence.iterate(iterator)
    else
      iterator = this.sequence.iterate(iterator)
      for var count = this.count; count > 0 and iterator; count = count - 1
        iterator = this.sequence.iterate(iterator)
      return iterator

  iteratorValue(iterator) = this.sequence.iteratorValue(iterator)

class TakeSequence < Sequence
  init(+sequence, +count)
    pass

  iterate(iterator)
    if not iterator do this.taken = 1 else do this.taken = this.taken + 1
    return None if this.taken > this.count else this.sequence.iterate(iterator)

  iteratorValue(iterator) = this.sequence.iteratorValue(iterator)

class FilterSequence < Sequence
  init(+sequence, +function)
    pass

  iterate(iterator)
    while iterator = this.sequence.iterate(iterator)
      if this.function(this.sequence.iteratorValue(iterator)) do break
    return iterator

  iteratorValue(iterator)
    return this.sequence.iteratorValue(iterator)

class String < Sequence
  attribute bytes = StringByteSequence(this)
  attribute codePoints = StringCodePointSequence(this)
  attribute length = this.byteCount

  +(other) = this.concatenate(other.toString())

  *(count)
    if (count is not Number) or (not count.isInteger) or count < 0
      error "Count must be a positive integer"

    var result = ""
    each i in 0..<count
      result = result + this
    return result

  split(delimiter)
    if (delimiter is not String) or delimiter.isEmpty
      error "Delimiter must be a string of at least one character"

    var result = []

    var last = 0
    var index = 0

    var delimiterSize = delimiter.byteCount
    var size = this.byteCount

    while last < size and (index = this.indexOf(delimiter, last)) != -1
      result.add(this[last..<index])
      last = index + delimiterSize

    if last < size
      result.add(this[last..-1])
    else
      result.add("")

    return result

  replace(from, to)
    if (from is not String) or from.isEmpty
      error "From value must be a non-empty string"
    if to is not String
      error "To value must be a string"

    var result = ""

    var last = 0
    var index = 0

    var fromSize = from.byteCount
    var size = this.byteCount

    while last < size and (index = this.indexOf(from, last)) != -1
      result = result + this[last..<index] + to
      last = index + fromSize

    if last < size do result = result + this[last..-1]

    return result

  trim() = this.trim_("\t\r\n ", True, True)
  trim(chars) = this.trim_(chars, True, True)
  trimEnd() = this.trim_("\t\r\n ", False, True)
  trimEnd(chars) = this.trim_(chars, False, True)
  trimStart() = this.trim_("\t\r\n ", True, False)
  trimStart(chars) = this.trim_(chars, True, False)

  trim_(chars, trimStart, trimEnd)
    if chars is not String
      error "Character being trimmed must be a string"

    var codePoints = chars.codePoints.toList()

    var start
    if trimStart
      while start = this.iterate(start)
        if not codePoints.contains(this.codePointAt(start)) do break

      if start == False do return ""
    else do start = 0

    var end
    if trimEnd
      end = this.byteCount - 1
      while end >= start
        var codePoint = this.codePointAt(end)
        if codePoint != -1 and not codePoints.contains(codePoint) do break
        end = end - 1

      if end <= start do return ""
    else do end = -1

    return this[start..end]

class StringByteSequence < Sequence
  init(+string)
    pass

  attribute count = this.string.byteCount

  get(index) = this.string.byteAt(index)
  iterate(iterator) = this.string.iterateByte(iterator)
  iteratorValue(iterator) = this.string.byteAt(iterator)

class StringCodePointSequence < Sequence
  init(+string)
    pass

  attribute count = this.string.count

  get(index) = this.string.codePointAt(index)
  iterate(iterator) = this.string.iterate(iterator)
  iteratorValue(iterator) = this.string.codePointAt(iterator)

class List < Sequence
  attribute count = this.size

  +(other)
    var result = this[0..-1]
    each element in other
      result.add(element)
    return result

  *(count)
    if (count is not Number) or (not count.isInteger) or count < 0
      error "Count must be a positive integer"

    var result = []
    each i in 0..<count
      result.addAll(this)
    return result

  addAll(other)
    each element in other
      this.add(element)

  map(transformation)
    return super.map(transformation).toList()

  sort()
    this.sort { |low, high| low <= high }

  sort(comparer)
    if comparer is not Function
      error "Comparer must be a function"
    this.quicksort(0, this.size - 1, comparer)

  quicksort(low, high, comparer)
    if low < high
      var p = this.partition(low, high, comparer)
      this.quicksort(low, p - 1, comparer)
      this.quicksort(p + 1, high, comparer)

  partition(low, high, comparer)
    var pivot = this[high]
    var i = low - 1
    each j in low..<high
      if comparer(this[j], pivot)
        i = i + 1
        this.swap(i, j)
    this.swap(i + 1, high)
    return i + 1

  toString() = "[=(this.joinToString())]"

class Map < Sequence
  attribute count = this.size
  attribute keys = MapKeySequence(this)
  attribute values = MapValueSequence(this)

  toString()
    var result = "["
    var first = True

    each key in this.keys
      if not first do result = result + ", "
      first = False
      result = result + "=(key) -> =(this[key])"

    return result + "]"

  iteratorValue(iterator) = MapEntry(this.keyIteratorValue(iterator), this.valueIteratorValue(iterator))

class MapEntry
  init(+key, +value)
    pass

  toString() = "=(this.key)->=(this.value)"

class MapKeySequence < Sequence
  init(+map)
    pass

  iterate(n) = this.map.iterate(n)
  iteratorValue(iterator) = this.map.keyIteratorValue(iterator)

class MapValueSequence < Sequence
  init(+map)
    pass

  iterate(n) = this.map.iterate(n)
  iteratorValue(iterator) = this.map.valueIteratorValue(iterator)

class Range < Sequence []
class Tuple < Sequence
  init()
    error "Tuple class is not directly callable"

  attribute count = this.size

  toString()
    result = "("
    for var i = 0; i < this.count; i = i = 1
      result = result + this[i]
      if i != this.count - 1 do result = result + ", "
    result = result + ")"
    return result

class Sys
  init()
    error "Sys class is not instantiable"

  static `print`()
    Sys.writeString("\n")

  static `print`(obj)
    Sys.writeObject(obj)
    Sys.writeString("\n")
    return obj

  static printAll(sequence)
    each object in sequence do Sys.writeObject(object)
    Sys.writeString("\n")

  static write(obj)
    Sys.writeObject(obj)
    return obj

  static writeAll(sequence)
    each object in sequence do Sys.writeObject(object)

  static writeObject(obj)
    var string = obj.toString()
    if string is not String
      string = "[invalid toString() method]"

    Sys.writeString(string)

  static input() = Sys.input("")
